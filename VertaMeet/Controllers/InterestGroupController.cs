using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using VertaMeet.Models;

namespace VertaMeet.Controllers
{
    public class InterestGroupController : ApiController
    {
        /* Autogenerated Code 

        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: api/InterestGroup
        public IQueryable<InterestGroupModel> GetInterestGroupModels()
        {
            return db.InterestGroupModels;
        }

        // GET: api/InterestGroup/5
        [ResponseType(typeof(InterestGroupModel))]
        public IHttpActionResult GetInterestGroupModel(int id)
        {
            InterestGroupModel interestGroupModel = db.InterestGroupModels.Find(id);
            if (interestGroupModel == null)
            {
                return NotFound();
            }

            return Ok(interestGroupModel);
        }

        // PUT: api/InterestGroup/5
        [ResponseType(typeof(void))]
        public IHttpActionResult PutInterestGroupModel(int id, InterestGroupModel interestGroupModel)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != interestGroupModel.Id)
            {
                return BadRequest();
            }

            db.Entry(interestGroupModel).State = EntityState.Modified;

            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!InterestGroupModelExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST: api/InterestGroup
        [ResponseType(typeof(InterestGroupModel))]
        public IHttpActionResult PostInterestGroupModel(InterestGroupModel interestGroupModel)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.InterestGroupModels.Add(interestGroupModel);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = interestGroupModel.Id }, interestGroupModel);
        }

        // DELETE: api/InterestGroup/5
        [ResponseType(typeof(InterestGroupModel))]
        public IHttpActionResult DeleteInterestGroupModel(int id)
        {
            InterestGroupModel interestGroupModel = db.InterestGroupModels.Find(id);
            if (interestGroupModel == null)
            {
                return NotFound();
            }

            db.InterestGroupModels.Remove(interestGroupModel);
            db.SaveChanges();

            return Ok(interestGroupModel);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool InterestGroupModelExists(int id)
        {
            return db.InterestGroupModels.Count(e => e.Id == id) > 0;
        }
    }
    
    */


    }
}